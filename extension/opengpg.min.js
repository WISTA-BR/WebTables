// Ensure openpgp library is loaded; it can be included via openpgp.min.js or via CDN.
 
chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
  if (message.action === "process_tables") {
    const payload = JSON.stringify(message.data);

    // The server's public key (replace with your actual key).
    const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----
[Insert Server Public Key Here]
-----END PGP PUBLIC KEY BLOCK-----`;

    try {
      // Encrypt the message payload using OpenPGP.
      const options = {
        message: await openpgp.createMessage({ text: payload }),
        encryptionKeys: await openpgp.readKey({ armoredKey: publicKeyArmored })
      };
      const encrypted = await openpgp.encrypt(options);
    
      // Prepare the final data with encryption.
      const finalData = { encryptedData: encrypted };

      // Optionally include GitHub user login OAuth token if available.
      // For example, retrieve it from chrome.storage or via an OAuth flow.
      // For demonstration, we use a placeholder.
      const githubToken = "your_github_oauth_token_if_available";

      // Send the encrypted data to the Flask server.
      fetch("http://127.0.0.1:5000/copy_table", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Auth-Token": "my_secret_token",  // Server-side expected token.
          "X-GitHub-Auth": githubToken         // GitHub token for user login.
        },
        body: JSON.stringify(finalData)
      })
        .then(response => response.json())
        .then(data => {
          console.log("Server response:", data);
          chrome.notifications.create({
            type: 'basic',
            iconUrl: 'icon48.png',
            title: 'WebTables Update',
            message: data.message
          });
        })
        .catch(error => {
          console.error("Error connecting to server:", error);
          chrome.notifications.create({
            type: 'basic',
            iconUrl: 'icon48.png',
            title: 'WebTables Error',
            message: "Could not update Excel log."
          });
        });
    } catch (err) {
      console.error("Encryption error:", err);
      chrome.notifications.create({
        type: 'basic',
        iconUrl: 'icon48.png',
        title: 'WebTables Encryption Error',
        message: "Failed to encrypt data."
      });
    }
  }
});
